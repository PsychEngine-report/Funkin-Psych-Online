# This is a basic workflow to help you get started with Actions

name: Build


# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
   workflow_dispatch:
   #push:
    # branches: [ main, experimental ]
    # tags: [ "*" ]
   #pull_request:
    # branches: [ main, experimental ]


  # Allows you to run this workflow manually from the Actions tab
  
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildLinux:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7

      - name: Retrieve Cache
        id: cache-linux
        uses: actions/cache@v4
        with:
          path: |
            export/release/linux/**
            !export/release/linux/bin/**
          key: ${{ runner.os }}-build-cache

      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          sudo apt-get install libvlc-dev
          sudo apt-get install libvlccore-dev
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linuxBuild
          path: 'export/release/linux/bin'
  buildWindows:
    runs-on: windows-2022

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7

      - name: Retrieve Cache
        id: cache-windows
        uses: actions/cache@v4
        with:
          path: |
            export/release/windows/**
            !export/release/windows/bin/**
          key: ${{ runner.os }}-build-cache

      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windowsBuild
          path: export/release/windows/bin
  buildMac:
    runs-on: macos-13

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7

      - name: Retrieve Cache
        id: cache-macos
        uses: actions/cache@v4
        with:
          path: |
            export/release/macos/**
            !export/release/macos/bin/**
          key: ${{ runner.os }}-build-cache

      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hmm --quiet
          haxelib run hmm install
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build mac --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macBuild
          path: export/release/macos/bin
  buildAndroid:
  #   # The type of runner that the job will run on
    runs-on: macos-15 #ubuntu dosen't work as exp&ected
    permissions: write-all

  #   # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
     - uses: actions/checkout@main

     - uses: krdlab/setup-haxe@master
       with:
           haxe-version: 4.3.7

     - name: Restore existing build cache for faster compilation
       uses: actions/cache@v4
       with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: cache-build-android
          path: |
            .haxelib/
            export/release/android/haxe/
            export/release/android/obj/
          restore-keys: |
            cache-build-android 
      
  #     # Runs a set of commands using the runners shell
     - name: Install Haxelib
       run: |
            haxelib setup ~/haxelib
            haxelib git hxcpp https://github.com/kittycathy233/hxcpp --quiet
            haxelib git lime https://github.com/kittycathy233/lime --quiet
            haxelib set hxcpp git
            haxelib set lime git
            haxelib install openfl 9.4.1 --quiet
            haxelib install flixel 5.8.0 --quiet
            haxelib set flixel 5.8.0
            haxelib install flixel-addons 3.3.2 --quiet
            haxelib install flixel-tools 1.5.1 --quiet
            haxelib install flixel-ui 2.5.0 --quiet
            haxelib install hscript-iris 1.1.3 --quiet
            haxelib install hscript 2.6.0 --quiet
            haxelib install tjson 1.4.0 --quiet
            haxelib git SScript https://github.com/Ethantobot11/SScript --quiet
            haxelib set SScript git
            haxelib git flxanimate https://github.com/Dot-Stuff/flxanimate 768740a56b26aa0c072720e0d1236b94afe68e3e --quiet
            haxelib git linc_luajit https://github.com/kittycathy233/linc_luajit --quiet
            haxelib set linc_luajit git
            haxelib install colyseus 0.15.2 --quiet
            haxelib install HtmlParser 3.4.0 --quiet
            haxelib install UnRAR 1.0.0 --quiet
            haxelib install away3d 5.0.9 --quiet
            haxelib git away3d https://github.com/Snirozu/away3d master --quiet
            haxelib install json2object 3.11.0 --quiet
            haxelib install hxjsonast 1.1.0 --quiet
            haxelib install lumod 2.1.0 --qquiet
            haxelib install actuate 1.9.0 --quiet
            haxelib install compiletime 2.8.0 --quiet
            haxelib install hxdiscord_rpc --quiet --skip-dependencies
            haxelib install hxvlc 2.0.1 --quiet --skip-dependencies
            haxelib git funkin.vis https://github.com/FunkinCrew/funkVis 22b1ce089dd924f15cdc4632397ef3504d464e90 --quiet --skip-dependencies
            haxelib git grig.audio https://github.com/Snirozu/grig.audio 162f924bdde427fc84af5b51961d2faef51f6955 --quiet
            haxelib install yagp 1.1.4 --quiet
  #         no hmm cuz pc/linux/mac would be like "Android things? no *trow error*"

     - name: Clearing already existing cache
       uses: actions/github-script@v6
       with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-android") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }
     - name: config android ig
       run: |
            haxelib run lime config ANDROID_SDK $ANDROID_HOME
            haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_LATEST_HOME
            haxelib run lime config JAVA_HOME $JAVA_HOME_17_arm64
            haxelib run lime config ANDROID_SETUP true
     - name: Clean Android build
       run: haxelib run lime clean android
     - name: Compile
       run: haxelib run lime build android -final -release -D officialBuild
     - name: Uploading new cache
       uses: actions/cache@v4
       with:
          # caching again since for some reason it doesnt work with the first post cache shit
          key: cache-build-android
          path: |
            .haxelib/
            export/release/android/haxe/
            export/release/android/obj/
          restore-keys: |
            cache-build-android
     - name: Show generated AndroidManifest.xml
       if: always()
       run: |
         echo "=== AndroidManifest.xml ==="
         cat export/release/android/bin/app/src/main/AndroidManifest.xml || true
     - name: Publish Artifact
       uses: actions/upload-artifact@v4
       with:
         name: androidBuild
         path: "export/release/android/bin/app/build/outputs/apk/release/*.apk"
  # smh: code signing shit
  buildiOS:
    runs-on: macos-13
    permissions: write-all

    steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
     - uses: actions/checkout@main

     - uses: krdlab/setup-haxe@master
       with:
            haxe-version: 4.3.7
     - name: Restore existing build cache for faster compilation
       uses: actions/cache@v4
       with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: cache-build-ios
          path: |
            .haxelib/
            export/release/ios/PsychEngine/haxe/
          restore-keys: |
            cache-build-ios
  #     # Runs a set of commands using the runners shell
     - name: Install Haxelib
       run: |
            haxelib setup ~/haxelib
            haxelib git hxcpp https://github.com/kittycathy233/hxcpp --quiet
            haxelib git lime https://github.com/kittycathy233/lime --quiet
            haxelib set hxcpp git
            haxelib set lime git
            haxelib install openfl 9.4.1 --quiet
            haxelib install flixel 5.8.0 --quiet
            haxelib set flixel 5.8.0
            haxelib install flixel-addons 3.3.2 --quiet
            haxelib install flixel-tools 1.5.1 --quiet
            haxelib install flixel-ui 2.5.0 --quiet
            haxelib install hscript-iris 1.1.3 --quiet
            haxelib install hscript 2.6.0 --quiet
            haxelib install tjson 1.4.0 --quiet
            haxelib git SScript https://github.com/Ethantobot11/SScript --quiet
            haxelib set SScript git
            haxelib git flxanimate https://github.com/Dot-Stuff/flxanimate 768740a56b26aa0c072720e0d1236b94afe68e3e --quiet
            haxelib git linc_luajit https://github.com/kittycathy233/linc_luajit --quiet
            haxelib set linc_luajit git
            haxelib install colyseus 0.15.2 --quiet
            haxelib install HtmlParser 3.4.0 --quiet
            haxelib install UnRAR 1.0.0 --quiet
            haxelib install away3d 5.0.9 --quiet
            haxelib git away3d https://github.com/Snirozu/away3d master --quiet
            haxelib install json2object 3.11.0 --quiet
            haxelib install hxjsonast 1.1.0 --quiet
            haxelib install lumod 2.1.0 --qquiet
            haxelib install actuate 1.9.0 --quiet
            haxelib install compiletime 2.8.0 --quiet
            haxelib install hxdiscord_rpc --quiet --skip-dependencies
            haxelib install hxvlc 2.0.1 --quiet --skip-dependencies
            haxelib git funkin.vis https://github.com/FunkinCrew/funkVis 22b1ce089dd924f15cdc4632397ef3504d464e90 --quiet --skip-dependencies
            haxelib git grig.audio https://github.com/Snirozu/grig.audio 162f924bdde427fc84af5b51961d2faef51f6955 --quiet
            haxelib install yagp 1.1.4 --quiet
     - name: Clearing already existing cache
       uses: actions/github-script@v6
       with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-ios") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                 })
                console.log("Cache cleared.")
              }
            }
     - name: Compile
       run: haxelib run lime build ios -final -nosign -D officialBuild
     - name: Make IPA
       run: |
          brew install ldid
          cd export/release/ios/build/Release-iphoneos/PsychEngine.app
          ldid -S../../../PsychEngine/PsychEngine.entitlements PsychEngine
          cd ..
          mkdir Payload
          mv PsychEngine.app Payload
          zip -r PsychEngine.ipa Payload
     - name: Publish Artifact
       uses: actions/upload-artifact@v4
       with:
            name: iOSBuild
            path: "export/release/ios/build/Release-iphoneos/PsychEngine.ipa"
     - name: Uploading new cache
       uses: actions/cache@v4
       with:
          # caching again since for some reason it doesnt work with the first post cache shit ?????????
          key: cache-build-ios
          path: |
            .haxelib/
            export/release/ios/PsychEngine/haxe/
          restore-keys: |
            cache-build-ios
  release:
    if: github.ref_type == 'tag'
    needs:
      - buildLinux
      - buildMac
      - buildWindows
      - buildAndroid
      - buildiOS
    
    runs-on: ubuntu-latest

    steps:
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: v${{ github.ref_name }}
        draft: true
        prerelease: false

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4

    - name: Zip artifacts
      run: |
        zip -r windowsBuild.zip windowsBuild/
        zip -r linuxBuild.zip linuxBuild/
        zip -r macBuild.zip macBuild/
        mv /home/runner/PsychEngine-release.apk /home/runner/PsychEngine-Android.apk
        zip -r androidBuild.zip androidBuild/
        mv ${{ github.workspace }}/PsychEngine.ipa /home/runner/PsychEngine.ipa
        zip -r iosBuild.zip iosBuild/

    - name: Upload Windows build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windowsBuild.zip
        asset_name: windowsBuild.zip
        asset_content_type: application/zip

    - name: Upload Linux build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linuxBuild.zip
        asset_name: linuxBuild.zip
        asset_content_type: application/zip

    - name: Upload MacOS build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: macBuild.zip
        asset_name: macBuild.zip
        asset_content_type: application/zip

    - name: Upload Android Build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: androidBuild.zip
        asset_name: androidBuild.zip
        asset_content_type: application/zip  
      
    - name: Upload iOS Build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: iosBuild.zip
        asset_name: iosBuild.zip
        asset_content_type: application/zip
        
